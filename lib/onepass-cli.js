// Generated by CoffeeScript 1.7.1

/*
MP := Master Password
For a random account:

   Ux := Username
   Px := Strong password generated
=> onepass_keychain = AES256( raw_keychain, keychain_pass )
    Where: keychain_pass := SHA256( MP, crypto-strong-pseudo-random-bits )
 */

(function() {
  var KEYCHAIN_READ_ERROR_MSG, PassUtils, ascli, cli, co_routine, debug, fs, keychain_location, log, program, read, sync, _;

  _ = require('lodash');

  fs = require('fs');

  sync = require('sync');

  read = require('read');

  program = require('commander');

  ascli = require('ascli');

  debug = require('debug');

  PassUtils = require("" + __dirname + "/onepass-utils");

  cli = ascli.app('onepass');

  log = debug('onepass');

  debug.enable('*');

  keychain_location = "" + (process.env.ONEPASS_PATH || process.env.HOME) + "/.onepass_keychain";

  KEYCHAIN_READ_ERROR_MSG = "Keychain was locked and could not be opened. Possible Reasons are:\n  * The master password you entered didn't match the one used before (Use correct master password)\n  * There is a bug in onepass (File a bug here: http://onepassbug.com)\n  * You are not the account owner (Stop snooping around)";

  co_routine = function(fn) {
    return function(env, options) {
      return sync(function() {
        var e, error_message;
        try {
          return fn();
        } catch (_error) {
          e = _error;
          e.message || (e.message = 'Unknown Failure');
          e.stack || (e.stack = 'N/A');
          error_message = "Something Went Wrong.\n  * Possible Cause: " + e.message + "\n  * Stack Trace: " + e.stack;
          return cli.fail(error_message, -1);
        }
      });
    };
  };

  program.version('0.0.1').usage('[command] [options]').option('-l, --location <location>', 'Location of keychain on disk', function(location) {
    if (fs.existsSync(location)) {
      log("Setting location to " + location);
      return keychain_location = location || DEFAULT_KEYCHAIN_LOCATION;
    } else {
      return cli.fail("Keychain location " + location + " is invalid");
    }
  });

  program.command('put').description('Creates/Updates account in keychain').action(co_routine(function(env, options) {
    var account_id, account_keychain_location, e, encrypted_keychain, hashed_account_id, keychain, master_password, random_password, username;
    account_id = read.sync(read, {
      prompt: 'Enter An Account Key:'
    });
    username = read.sync(read, {
      prompt: 'Enter Username:'
    });
    master_password = read.sync(read, {
      prompt: 'Enter Master Password:',
      silent: true
    });
    log("Generating Keychain");
    log("account_id = " + account_id);
    log("username = " + username);
    log("master_password = " + master_password);
    random_password = PassUtils.generatePassword();
    hashed_account_id = PassUtils.hashPassword(account_id);
    account_keychain_location = "" + keychain_location + ";" + hashed_account_id;
    if (fs.existsSync(account_keychain_location)) {
      try {
        encrypted_keychain = fs.readFileSync(account_keychain_location, 'HEX');
        keychain = JSON.parse(PassUtils.decrypt(encrypted_keychain, master_password));
      } catch (_error) {
        e = _error;
        cli.fail(KEYCHAIN_READ_ERROR_MSG, -1);
      }
    } else {
      log("No Keychain located. Creating a new one ...");
    }
    keychain = {
      username: username,
      random_password: random_password
    };
    encrypted_keychain = PassUtils.encrypt(JSON.stringify(keychain), master_password);
    fs.writeFileSync(account_keychain_location, encrypted_keychain, 'HEX');
    return cli.ok("Keychain Created Successfully! at " + account_keychain_location);
  }));

  program.command('get').description('Retrieves account credentials in keychain').action(co_routine(function(env, options) {
    var account_id, account_keychain_location, e, encrypted_keychain, hashed_account_id, keychain, master_password, random_password, username;
    account_id = read.sync(read, {
      prompt: 'Enter An Account Key:'
    });
    master_password = read.sync(read, {
      prompt: 'Enter Master Password:',
      silent: true
    });
    hashed_account_id = PassUtils.hashPassword(account_id);
    account_keychain_location = "" + keychain_location + ";" + hashed_account_id;
    log("Retrieving Keychain for account " + account_id);
    if (fs.existsSync(account_keychain_location)) {
      try {
        encrypted_keychain = fs.readFileSync(account_keychain_location, 'HEX');
        keychain = JSON.parse(PassUtils.decrypt(encrypted_keychain, master_password));
      } catch (_error) {
        e = _error;
        cli.fail(KEYCHAIN_READ_ERROR_MSG, -1);
      }
    } else {
      cli.fail("No Keychain located.");
    }
    if (keychain == null) {
      return cli.fail("No Account Credentials Stored for id = " + account_id);
    } else {
      username = keychain.username, random_password = keychain.random_password;
      return cli.ok("Here are credentials for account " + account_id + ":\n\n  * username = " + username + "\n  * password = " + random_password);
    }
  }));

  if (process.argv.length <= 2) {
    process.argv.push('--help');
  }

  log("CLI arguments provided:\n");

  log("\t" + process.argv);

  program.parse(process.argv);

}).call(this);
